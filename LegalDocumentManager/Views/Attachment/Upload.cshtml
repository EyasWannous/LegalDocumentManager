@{
    ViewData["Title"] = "Upload File";
}

<h2>Upload File</h2>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}
@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

<form asp-action="Upload" method="post" enctype="multipart/form-data">
    <div class="form-group">
        <label for="file">Select File</label>
        <input type="file" id="file" class="form-control" onchange="encryptFile()" required>
    </div>
    <input type="hidden" name="encryptedFile" id="encryptedFile" />
    <input type="hidden" name="fileName" id="fileName" />
    <button type="submit" class="btn btn-primary">Upload</button>
</form>

<script>
    // const crypto = require('crypto')
    // const fs = require('fs')
    const publicKey = '@ViewData["PublicKey"]';
    let cryptoKey; // To store the imported key globally

    // Initialize the key when the script loads
    (async function initializeKey() {
        const storedKey = localStorage.getItem("key");
        if (storedKey) {
            const rawKey = Uint8Array.from(atob(storedKey), c => c.charCodeAt(0));
            cryptoKey = await crypto.subtle.importKey(
                "raw",
                rawKey,
                { name: "AES-CTR" },
                false,
                ["encrypt"]
            );
        } else {
            console.error("Encryption key not found in localStorage.");
        }
    })();

    async function encryptFile() {
        const fileInput = document.getElementById('file');
        const file = fileInput.files[0];
        if (!file) return;

        document.getElementById('fileName').value = file.name;

        const reader = new FileReader();
        reader.onload = async function () {
            if (!cryptoKey) {
                alert("Encryption key not initialized.");
                return;
            }

            const fileContent = new TextEncoder().encode(reader.result);
            const encrypted = await encrypt(fileContent, cryptoKey);
            document.getElementById('encryptedFile').value = btoa(
                String.fromCharCode(...new Uint8Array(encrypted))
            ); // Store as Base64
        };
        reader.readAsText(file); // Adjusted to read text
    }

    async function encrypt(data, key) {
        const counter = crypto.getRandomValues(new Uint8Array(16)); // Generate random counter
        return crypto.subtle.encrypt(
            {
                name: "AES-CTR",
                counter: counter,
                length: 128, // Counter length in bits
            },
            key,
            data
        );
    }

</script>
