@page "/fileupload"
@rendermode InteractiveServer

@using System.Security.Cryptography
@using System.Text
@using System.Text.Json.Serialization
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject KeyManagementService KeyService
@inject ProtectedSessionStorage ProtectedSessionStorage

<h3>Upload Document</h3>

<div>
    <InputFile OnChange="HandleFileSelected" class="form-control" />
    <input type="text" @bind="FileName" placeholder="Enter File Name" class="form-control mt-2" />
    <button @onclick="UploadFile" class="btn btn-primary mt-2" disabled="@(SelectedFile == null)">Upload</button>
</div>

@if (IsLoading)
{
    <p>Uploading...</p>
}

@if (!string.IsNullOrEmpty(Message))
{
    <p class="@MessageClass">@Message</p>
}

@code {
    private IBrowserFile? SelectedFile;
    private string FileName = string.Empty;
    private bool IsLoading = false;
    private string Message = string.Empty;
    private string MessageClass = string.Empty;
    private string? userToken;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
        FileName = SelectedFile?.Name ?? string.Empty;
        Message = string.Empty;
    }

    private async Task UploadFile()
    {
        if (SelectedFile is null || string.IsNullOrWhiteSpace(FileName))
        {
            Message = "Please select a file and enter a valid file name.";
            MessageClass = "text-danger";
            return;
        }

        IsLoading = true;
        Message = string.Empty;

        try
        {
            // Retrieve token from ProtectedSessionStorage
            var userSessionResult = await ProtectedSessionStorage.GetAsync<UserSession>("UserSession");
            var userSession = userSessionResult.Success ? userSessionResult.Value : null;

            if (userSession?.Token == null)
            {
                Message = "You are not authorized. Please log in.";
                MessageClass = "text-danger";
                return;
            }

            userToken = userSession.Token;

            // Add token to the request headers
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", userToken);

            // Read the file into a byte array
            using var fileStream = SelectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // Limit to 10MB
            using var memoryStream = new MemoryStream();
            await fileStream.CopyToAsync(memoryStream);
            var fileBytes = memoryStream.ToArray();

            // Encrypt the file
            var encryptedFile = EncryptFile(fileBytes, KeyManagementService.SymmetricKey);

            // Prepare the upload view model (JSON payload)
            var uploadModel = new UploadViewModel
                {
                    EncryptedFile = Convert.ToBase64String(encryptedFile),
                    FileName = FileName
                };

            // Send the data as JSON
            var response = await Http.PostAsJsonAsync("https://localhost:7011/api/Attachment/Upload", uploadModel);

            if (response.IsSuccessStatusCode)
            {
                Message = "File uploaded successfully!";
                MessageClass = "text-success";
            }
            else
            {
                Message = $"Failed to upload file. Status: {response.StatusCode}";
                MessageClass = "text-danger";
            }
        }
        catch (Exception ex)
        {
            Message = $"An error occurred: {ex.Message}";
            MessageClass = "text-danger";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private byte[] EncryptFile(byte[] fileBytes, string symmetricKey)
    {
        using var aes = Aes.Create();
        aes.Key = Convert.FromBase64String(symmetricKey);
        aes.GenerateIV();

        using var encryptor = aes.CreateEncryptor();
        using var ms = new MemoryStream();
        ms.Write(aes.IV, 0, aes.IV.Length); // Prepend IV to the encrypted data
        using (var cryptoStream = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
        {
            cryptoStream.Write(fileBytes, 0, fileBytes.Length);
        }

        return ms.ToArray();
    }

    public class UploadViewModel
    {
        [JsonPropertyName("encryptedFile")]
        public string EncryptedFile { get; set; }

        [JsonPropertyName("fileName")]
        public string FileName { get; set; }
    }
}
